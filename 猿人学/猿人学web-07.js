/**
 * 从 Base64 字体字符串获取 Unicode 转义序列映射
 * @param {string} base64String - Base64 编码的字体字符串
 * @param {string} format - 字体格式 ('woff', 'woff2', 'truetype', 'opentype')
 * @returns {Promise<Object>} 字符映射对象
 */
var opentype = require('opentype.js');
function getUnicodeMappingFromBase64(base64String) {
    return new Promise((resolve, reject) => {
        // 构造 Data URL
        // const dataUrl = `data:font/truetype;charset=utf-8;base64,${base64String}`;
 const dataUrl  = 'data:font/truetype;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMgAfOe8AAAEoAAAAYGNtYXCmbY6lAAABpAAAAYpnbHlmV2dRzQAAA0gAAAQCaGVhZCAro6wAAACsAAAANmhoZWEGxQE+AAAA5AAAACRobXR4ArwAAAAAAYgAAAAabG9jYQSxBfIAAAMwAAAAGG1heHABGABFAAABCAAAACBuYW1lUGhGMAAAB0wAAAJzcG9zdCfna0sAAAnAAAAAiAABAAAAAQAAWiWXLl8PPPUACQPoAAAAANnIUd8AAAAA5P8OKgAM/+wCOwLSAAAACAACAAAAAAAAAAEAAAQk/qwAfgJYAAAANwIhAAEAAAAAAAAAAAAAAAAAAAACAAEAAAALADkAAwAAAAAAAgAAAAoACgAAAP8AAAAAAAAABAIqAZAABQAIAtED0wAAAMQC0QPTAAACoABEAWkAAAIABQMAAAAAAAAAAAAAEAAAAAAAAAAAAAAAUGZFZABApJPJYQQk/qwAfgQkAVQAAAABAAAAAAAAAAAAAAAgAAAAZAAAAlgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAAcAAEAAAAAAIQAAwABAAAAHAAEAGgAAAAWABAAAwAGpJOlcrGCtDm1SLZSwVbEJ8gyyWH//wAApJOlcrGCtDm1SLZSwVbEJ8gyyWH//1tzWo9OhUvPSsJJsj6tO9s30zaoAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAeAE8AZQC7APwBOgFzAaIBvwIBAAEADP/sADgAEwACAAA3MxUMLBMnAAABAEEAAAIWAscABgAAExUhATMBNUEBef7/VwEGAsdC/XsClDMAAAEAQQAAAhgC0gAdAAABIgYHMzY3NjcyFhUUBwYHBgcGFSE1ITY3Njc2NCYBT4GMAVQKHCRIUlMsLCWAUCUBvv6CFIKZA0xPAtKGe1g4JAM+PTdQD1VJKlJdPkhaWyFUsXEAAQBuAAABawLHAAkAAAEGBgcVNjcRMxEBKC1NQGE+XgLHHEoGWig4/Z8CxwADADj/8gI7AtIAHwAsADgAAAEiBwYVFBcWFzUGBwYVFBYyNzY1NCcmJxU2NzY1NCcmBzIXFhQHJiIHJjQ3NhMyFxYUBwYiJjQ3NgEpcDw6GBNhYyUPe+hQUEAUPEMDHi1PakI4Ji4csh0RDy9MTzc4ODWsYjQuAtIOS15FJC4QEhkwQENZb1oVWUNAMBkSEC4kRV5LDj0oEoUlAQElhRIo/sIoD5ooEjqaDygAAgAy//ICHgLSABsAKAAAASIHBhUUFxYXNjY0JiMiJwYHMyc0NzYXNhUzJgM2FxYUBwYHIicmNDYBT4tRQUxRWHh/b15MNjAiAgEyK0yiTxXcUjYfMCxLSCYaRALSdGezmmVSAQGJy30DMzEKfUdeCgp+vf64F0Etoh4mFzY7f2QAAAIAMv/yAh4C0gAcACgAAAEiBhUUFxYzNjY3IxcUBwYjIicjFjM2NzY1NCcmBzIXFhQGIyImNTQ2AR1qgS9uRjV/KCkYQjNOewNWEbuLQjwwQ4xZKCltPU9ZVwLSd247bFcBRkEza0dgfb0BamKurFhhTSQ4lU5jRDpeAAABADL/8gI7AscAJAAAEwMzNjc2MxYWFRQGIyInJicjFhcWMzI3NjU0JiMGBwYHIzchNWsoRhckOSx6L2ccbC8VKEURPE9RgSlym2Y5HjYOCgoBYgLH/nQsGBUCV2JISA0ZQklLK0hTU4R0BQ0WE/czAAACADj/8gIeAtIADAAZAAABBgcGEBcWIDc2ECcmBzIXFhAHBiInJhA3NgEpjjkqKjkBDjY/PzaAegUmJgXlHygoHwLSBGpX/uOaZGSaAR1XakZfPP7zNGNjNAENPF8AAgASAAACMwLHAAoADgAAAQEVIRUzNTM1IxEHMxEhAYD+kgFtQ3FxSQb+7ALH/iM7r68qAe52/ogAAAEAMP/yAh4C0gArAAABIgcGBzM2NjcWBxYUBiMjFTM2FhQHBiMiJzYnIwYXFhcyNjU0JyYnNjU0JgEnaD8+AVACYERsAiFQSzNbMFMjPUhJLBpNUAJXPWZ2fhwRXoNNAtIOY0otRAwMGxKUNEwdXHstFyYeUHw0OgGAWUUrLw0mfWtNAAAAAAASAN4AAQAAAAAAAAAXAAAAAQAAAAAAAQAMABcAAQAAAAAAAgAHACMAAQAAAAAAAwAUACoAAQAAAAAABAAUACoAAQAAAAAABQALAD4AAQAAAAAABgAUACoAAQAAAAAACgArAEkAAQAAAAAACwATAHQAAwABBAkAAAAuAIcAAwABBAkAAQAYALUAAwABBAkAAgAOAM0AAwABBAkAAwAoANsAAwABBAkABAAoANsAAwABBAkABQAWAQMAAwABBAkABgAoANsAAwABBAkACgBWARkAAwABBAkACwAmAW9DcmVhdGVkIGJ5IGZvbnQtY2Fycmllci5QaW5nRmFuZyBTQ1JlZ3VsYXIuUGluZ0ZhbmctU0MtUmVndWxhclZlcnNpb24gMS4wR2VuZXJhdGVkIGJ5IHN2ZzJ0dGYgZnJvbSBGb250ZWxsbyBwcm9qZWN0Lmh0dHA6Ly9mb250ZWxsby5jb20AQwByAGUAYQB0AGUAZAAgAGIAeQAgAGYAbwBuAHQALQBjAGEAcgByAGkAZQByAC4AUABpAG4AZwBGAGEAbgBnACAAUwBDAFIAZQBnAHUAbABhAHIALgBQAGkAbgBnAEYAYQBuAGcALQBTAEMALQBSAGUAZwB1AGwAYQByAFYAZQByAHMAaQBvAG4AIAAxAC4AMABHAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAHMAdgBnADIAdAB0AGYAIABmAHIAbwBtACAARgBvAG4AdABlAGwAbABvACAAcAByAG8AagBlAGMAdAAuAGgAdAB0AHAAOgAvAC8AZgBvAG4AdABlAGwAbABvAC4AYwBvAG0AAAIAAAAAAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAsACwAAAQsBAwEHAQoBBAEFAQYBCAEJAQIHdW5pYjU0OAd1bmljNDI3B3VuaWM4MzIHdW5pYTQ5Mwd1bmliMTgyB3VuaWMxNTYHdW5pYjQzOQd1bmljOTYxB3VuaWI2NTIHdW5pYTU3Mg=='
        // 加载字体
        opentype.load(dataUrl, (err, font) => {
            if (err) {
                reject(new Error(`字体加载失败: ${err.message}`));
                return;
            }

            const mapping = {};
            const glyphs = font.glyphs;

            // 遍历所有字形
            for (let i = 0; i < glyphs.length; i++) {
                const glyph = glyphs.get(i);

                if (glyph.unicode !== undefined && glyph.unicode !== null) {
                    const unicode = glyph.unicode;
                    const char = String.fromCharCode(unicode);

                    // 生成各种转义序列
                    mapping[char] = {
                        // 字符本身
                        character: char,
                        // Unicode 码点
                        codePoint: unicode,
                        // HTML 十进制实体
                        htmlDecimal: `&#${unicode};`,
                        // HTML 十六进制实体
                        htmlHex: `&#x${unicode.toString(16).toUpperCase()};`,
                        // JavaScript Unicode 转义
                        jsUnicode: `\\u${unicode.toString(16).toUpperCase().padStart(4, '0')}`,
                        // CSS Unicode 转义
                        cssUnicode: `\\${unicode.toString(16).toUpperCase().padStart(4, '0')}`,
                        // 字形名称
                        glyphName: glyph.name || 'unnamed'
                    };
                }
            }

            resolve(mapping);
        });
    });
}

// 使用示例
function example() {
    try {
        // 假设这是你的 Base64 字体字符串
        const base64FontString =
            "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"

        const mapping =  getUnicodeMappingFromBase64(base64FontString);

        console.log('字符映射表:', mapping);

        // 打印所有映射关系
        Object.values(mapping).forEach(item => {
            console.log(`字符: ${item.character}`);
            console.log(`  Unicode: U+${item.codePoint.toString(16).toUpperCase()}`);
            console.log(`  HTML实体: ${item.htmlDecimal} 或 ${item.htmlHex}`);
            console.log(`  JS转义: "${item.jsUnicode}"`);
            console.log(`  CSS转义: "${item.cssUnicode}"`);
            console.log(`  字形名称: ${item.glyphName}`);
            console.log('---');
        });

        return mapping;
    } catch (error) {
        console.error('错误:', error);
    }
}
example()